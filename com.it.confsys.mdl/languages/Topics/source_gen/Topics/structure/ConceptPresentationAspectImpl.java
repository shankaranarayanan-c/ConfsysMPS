package Topics.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Conference;
  private ConceptPresentation props_DurationTopic;
  private ConceptPresentation props_LightningTopic;
  private ConceptPresentation props_Topic;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Conference:
        if (props_Conference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Conference = cpb.create();
        }
        return props_Conference;
      case LanguageConceptSwitch.DurationTopic:
        if (props_DurationTopic == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("durationtopic");
          props_DurationTopic = cpb.create();
        }
        return props_DurationTopic;
      case LanguageConceptSwitch.LightningTopic:
        if (props_LightningTopic == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("lightningtopic");
          props_LightningTopic = cpb.create();
        }
        return props_LightningTopic;
      case LanguageConceptSwitch.Topic:
        if (props_Topic == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Topic = cpb.create();
        }
        return props_Topic;
    }
    return null;
  }
}
